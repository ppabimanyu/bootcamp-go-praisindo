// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	db "boiler-plate/pkg/db"
	context "context"

	domain "boiler-plate/internal/submissions/domain"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// SubmissionsRepository is an autogenerated mock type for the SubmissionsRepository type
type SubmissionsRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, tx, model
func (_m *SubmissionsRepository) Create(ctx context.Context, tx *gorm.DB, model *domain.Submissions) error {
	ret := _m.Called(ctx, tx, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *domain.Submissions) error); ok {
		r0 = rf(ctx, tx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, tx, key
func (_m *SubmissionsRepository) Delete(ctx context.Context, tx *gorm.DB, key int) error {
	ret := _m.Called(ctx, tx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, int) error); ok {
		r0 = rf(ctx, tx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Detail provides a mock function with given fields: ctx, tx, id
func (_m *SubmissionsRepository) Detail(ctx context.Context, tx *gorm.DB, id int) (*domain.Submissions, error) {
	ret := _m.Called(ctx, tx, id)

	var r0 *domain.Submissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, int) (*domain.Submissions, error)); ok {
		return rf(ctx, tx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, int) *domain.Submissions); ok {
		r0 = rf(ctx, tx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Submissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, int) error); ok {
		r1 = rf(ctx, tx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetailByUser provides a mock function with given fields: ctx, tx, id
func (_m *SubmissionsRepository) DetailByUser(ctx context.Context, tx *gorm.DB, id int) (*domain.Submissions, error) {
	ret := _m.Called(ctx, tx, id)

	var r0 *domain.Submissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, int) (*domain.Submissions, error)); ok {
		return rf(ctx, tx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, int) *domain.Submissions); ok {
		r0 = rf(ctx, tx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Submissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, int) error); ok {
		r1 = rf(ctx, tx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: ctx, tx, limit, page
func (_m *SubmissionsRepository) Find(ctx context.Context, tx *gorm.DB, limit int, page int) (*[]domain.Submissions, *db.Paginate, error) {
	ret := _m.Called(ctx, tx, limit, page)

	var r0 *[]domain.Submissions
	var r1 *db.Paginate
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, int, int) (*[]domain.Submissions, *db.Paginate, error)); ok {
		return rf(ctx, tx, limit, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, int, int) *[]domain.Submissions); ok {
		r0 = rf(ctx, tx, limit, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Submissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, int, int) *db.Paginate); ok {
		r1 = rf(ctx, tx, limit, page)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*db.Paginate)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *gorm.DB, int, int) error); ok {
		r2 = rf(ctx, tx, limit, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByUser provides a mock function with given fields: ctx, tx, limit, page, userid
func (_m *SubmissionsRepository) FindByUser(ctx context.Context, tx *gorm.DB, limit int, page int, userid int) (*[]domain.Submissions, *db.Paginate, error) {
	ret := _m.Called(ctx, tx, limit, page, userid)

	var r0 *[]domain.Submissions
	var r1 *db.Paginate
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, int, int, int) (*[]domain.Submissions, *db.Paginate, error)); ok {
		return rf(ctx, tx, limit, page, userid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, int, int, int) *[]domain.Submissions); ok {
		r0 = rf(ctx, tx, limit, page, userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Submissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, int, int, int) *db.Paginate); ok {
		r1 = rf(ctx, tx, limit, page, userid)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*db.Paginate)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *gorm.DB, int, int, int) error); ok {
		r2 = rf(ctx, tx, limit, page, userid)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: ctx, tx, id, model
func (_m *SubmissionsRepository) Update(ctx context.Context, tx *gorm.DB, id int, model *domain.Submissions) error {
	ret := _m.Called(ctx, tx, id, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, int, *domain.Submissions) error); ok {
		r0 = rf(ctx, tx, id, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSubmissionsRepository creates a new instance of SubmissionsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubmissionsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubmissionsRepository {
	mock := &SubmissionsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
