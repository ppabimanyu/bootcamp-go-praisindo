// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: wallet/v1/wallet_v1.proto

package wallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Wallets_GetAllWallet_FullMethodName    = "/proto.wallets.v1.Wallets/GetAllWallet"
	Wallets_GetDetailWallet_FullMethodName = "/proto.wallets.v1.Wallets/GetDetailWallet"
	Wallets_CreateWallet_FullMethodName    = "/proto.wallets.v1.Wallets/CreateWallet"
	Wallets_UpdateWallet_FullMethodName    = "/proto.wallets.v1.Wallets/UpdateWallet"
	Wallets_DeleteWallet_FullMethodName    = "/proto.wallets.v1.Wallets/DeleteWallet"
)

// WalletsClient is the client API for Wallets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletsClient interface {
	GetAllWallet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllWalletsRes, error)
	GetDetailWallet(ctx context.Context, in *GetDetailWalletReq, opts ...grpc.CallOption) (*GetDetailWalletRes, error)
	CreateWallet(ctx context.Context, in *CreateWalletReq, opts ...grpc.CallOption) (*MutationRes, error)
	UpdateWallet(ctx context.Context, in *UpdateWalletReq, opts ...grpc.CallOption) (*MutationRes, error)
	DeleteWallet(ctx context.Context, in *DeleteWalletReq, opts ...grpc.CallOption) (*MutationRes, error)
}

type walletsClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletsClient(cc grpc.ClientConnInterface) WalletsClient {
	return &walletsClient{cc}
}

func (c *walletsClient) GetAllWallet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllWalletsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllWalletsRes)
	err := c.cc.Invoke(ctx, Wallets_GetAllWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletsClient) GetDetailWallet(ctx context.Context, in *GetDetailWalletReq, opts ...grpc.CallOption) (*GetDetailWalletRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDetailWalletRes)
	err := c.cc.Invoke(ctx, Wallets_GetDetailWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletsClient) CreateWallet(ctx context.Context, in *CreateWalletReq, opts ...grpc.CallOption) (*MutationRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutationRes)
	err := c.cc.Invoke(ctx, Wallets_CreateWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletsClient) UpdateWallet(ctx context.Context, in *UpdateWalletReq, opts ...grpc.CallOption) (*MutationRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutationRes)
	err := c.cc.Invoke(ctx, Wallets_UpdateWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletsClient) DeleteWallet(ctx context.Context, in *DeleteWalletReq, opts ...grpc.CallOption) (*MutationRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutationRes)
	err := c.cc.Invoke(ctx, Wallets_DeleteWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletsServer is the server API for Wallets service.
// All implementations must embed UnimplementedWalletsServer
// for forward compatibility
type WalletsServer interface {
	GetAllWallet(context.Context, *emptypb.Empty) (*GetAllWalletsRes, error)
	GetDetailWallet(context.Context, *GetDetailWalletReq) (*GetDetailWalletRes, error)
	CreateWallet(context.Context, *CreateWalletReq) (*MutationRes, error)
	UpdateWallet(context.Context, *UpdateWalletReq) (*MutationRes, error)
	DeleteWallet(context.Context, *DeleteWalletReq) (*MutationRes, error)
	mustEmbedUnimplementedWalletsServer()
}

// UnimplementedWalletsServer must be embedded to have forward compatible implementations.
type UnimplementedWalletsServer struct {
}

func (UnimplementedWalletsServer) GetAllWallet(context.Context, *emptypb.Empty) (*GetAllWalletsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllWallet not implemented")
}
func (UnimplementedWalletsServer) GetDetailWallet(context.Context, *GetDetailWalletReq) (*GetDetailWalletRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailWallet not implemented")
}
func (UnimplementedWalletsServer) CreateWallet(context.Context, *CreateWalletReq) (*MutationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedWalletsServer) UpdateWallet(context.Context, *UpdateWalletReq) (*MutationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWallet not implemented")
}
func (UnimplementedWalletsServer) DeleteWallet(context.Context, *DeleteWalletReq) (*MutationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWallet not implemented")
}
func (UnimplementedWalletsServer) mustEmbedUnimplementedWalletsServer() {}

// UnsafeWalletsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletsServer will
// result in compilation errors.
type UnsafeWalletsServer interface {
	mustEmbedUnimplementedWalletsServer()
}

func RegisterWalletsServer(s grpc.ServiceRegistrar, srv WalletsServer) {
	s.RegisterService(&Wallets_ServiceDesc, srv)
}

func _Wallets_GetAllWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServer).GetAllWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallets_GetAllWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServer).GetAllWallet(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallets_GetDetailWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServer).GetDetailWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallets_GetDetailWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServer).GetDetailWallet(ctx, req.(*GetDetailWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallets_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallets_CreateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServer).CreateWallet(ctx, req.(*CreateWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallets_UpdateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServer).UpdateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallets_UpdateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServer).UpdateWallet(ctx, req.(*UpdateWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallets_DeleteWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServer).DeleteWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallets_DeleteWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServer).DeleteWallet(ctx, req.(*DeleteWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Wallets_ServiceDesc is the grpc.ServiceDesc for Wallets service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wallets_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.wallets.v1.Wallets",
	HandlerType: (*WalletsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllWallet",
			Handler:    _Wallets_GetAllWallet_Handler,
		},
		{
			MethodName: "GetDetailWallet",
			Handler:    _Wallets_GetDetailWallet_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _Wallets_CreateWallet_Handler,
		},
		{
			MethodName: "UpdateWallet",
			Handler:    _Wallets_UpdateWallet_Handler,
		},
		{
			MethodName: "DeleteWallet",
			Handler:    _Wallets_DeleteWallet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wallet/v1/wallet_v1.proto",
}
