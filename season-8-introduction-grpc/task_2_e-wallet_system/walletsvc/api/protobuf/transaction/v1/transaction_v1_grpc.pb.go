// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: transaction/v1/transaction_v1.proto

package transaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Transactions_GetAllTransaction_FullMethodName    = "/proto.transactions.v1.Transactions/GetAllTransaction"
	Transactions_GetDetailTransaction_FullMethodName = "/proto.transactions.v1.Transactions/GetDetailTransaction"
	Transactions_CreateTransaction_FullMethodName    = "/proto.transactions.v1.Transactions/CreateTransaction"
)

// TransactionsClient is the client API for Transactions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionsClient interface {
	GetAllTransaction(ctx context.Context, in *GetAllTransactionReq, opts ...grpc.CallOption) (*GetAllTransactionsRes, error)
	GetDetailTransaction(ctx context.Context, in *GetDetailTransactionReq, opts ...grpc.CallOption) (*GetDetailTransactionRes, error)
	CreateTransaction(ctx context.Context, in *CreateTransactionReq, opts ...grpc.CallOption) (*MutationRes, error)
}

type transactionsClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionsClient(cc grpc.ClientConnInterface) TransactionsClient {
	return &transactionsClient{cc}
}

func (c *transactionsClient) GetAllTransaction(ctx context.Context, in *GetAllTransactionReq, opts ...grpc.CallOption) (*GetAllTransactionsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllTransactionsRes)
	err := c.cc.Invoke(ctx, Transactions_GetAllTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsClient) GetDetailTransaction(ctx context.Context, in *GetDetailTransactionReq, opts ...grpc.CallOption) (*GetDetailTransactionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDetailTransactionRes)
	err := c.cc.Invoke(ctx, Transactions_GetDetailTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsClient) CreateTransaction(ctx context.Context, in *CreateTransactionReq, opts ...grpc.CallOption) (*MutationRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutationRes)
	err := c.cc.Invoke(ctx, Transactions_CreateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionsServer is the server API for Transactions service.
// All implementations must embed UnimplementedTransactionsServer
// for forward compatibility
type TransactionsServer interface {
	GetAllTransaction(context.Context, *GetAllTransactionReq) (*GetAllTransactionsRes, error)
	GetDetailTransaction(context.Context, *GetDetailTransactionReq) (*GetDetailTransactionRes, error)
	CreateTransaction(context.Context, *CreateTransactionReq) (*MutationRes, error)
	mustEmbedUnimplementedTransactionsServer()
}

// UnimplementedTransactionsServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionsServer struct {
}

func (UnimplementedTransactionsServer) GetAllTransaction(context.Context, *GetAllTransactionReq) (*GetAllTransactionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTransaction not implemented")
}
func (UnimplementedTransactionsServer) GetDetailTransaction(context.Context, *GetDetailTransactionReq) (*GetDetailTransactionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailTransaction not implemented")
}
func (UnimplementedTransactionsServer) CreateTransaction(context.Context, *CreateTransactionReq) (*MutationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedTransactionsServer) mustEmbedUnimplementedTransactionsServer() {}

// UnsafeTransactionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionsServer will
// result in compilation errors.
type UnsafeTransactionsServer interface {
	mustEmbedUnimplementedTransactionsServer()
}

func RegisterTransactionsServer(s grpc.ServiceRegistrar, srv TransactionsServer) {
	s.RegisterService(&Transactions_ServiceDesc, srv)
}

func _Transactions_GetAllTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServer).GetAllTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transactions_GetAllTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServer).GetAllTransaction(ctx, req.(*GetAllTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactions_GetDetailTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServer).GetDetailTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transactions_GetDetailTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServer).GetDetailTransaction(ctx, req.(*GetDetailTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactions_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transactions_CreateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServer).CreateTransaction(ctx, req.(*CreateTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Transactions_ServiceDesc is the grpc.ServiceDesc for Transactions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transactions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.transactions.v1.Transactions",
	HandlerType: (*TransactionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllTransaction",
			Handler:    _Transactions_GetAllTransaction_Handler,
		},
		{
			MethodName: "GetDetailTransaction",
			Handler:    _Transactions_GetDetailTransaction_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _Transactions_CreateTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction/v1/transaction_v1.proto",
}
